{"ast":null,"code":"var _jsxFileName = \"/Users/macos/Desktop/WorkSpace/ToDoList/TodoList-app/src/App.js\";\n// import logo from './logo.svg';\nimport './App.css';\nimport TodoAdd from './components/TodoList'; // // thêm công việc \n// function App() {\n//   const [job, setJob] = useState([]);\n//   // danh sach cong viec(neu local ko luu thi tra ve mang rong)\n//   // toan tu nulllist\n//   const [jobs, setJobs] = useState([]);\n//   const [indexOfJobEdit, setIndexOfJobEdit] = useState(null);\n//   // const input1 = useRef(null);\n//   // const input2 = useRef(null);\n//   // gui du lieu cua form di\n//   const handleSubmit = () => {\n//     // lấy ra mang setJobs \n//     //để bảo lưu những job trong tương lai khi mà thêm job mới\n//     // console.log(indexOfJobEdit)\n//     if(indexOfJobEdit !== null) {\n//       let newJobs = jobs.map((value,index) => {\n//         if(index === indexOfJobEdit) {\n//           return value = job;\n//         }\n//         return value\n//       })\n//       setIndexOfJobEdit(null)\n//       setJobs([...newJobs])\n//     }\n//     else {\n//       setJobs([...jobs, job])\n//     }\n//     setJobs( jobs => { \n//       // const newJobs = [...jobs,job];\n//       localStorage.setItem('jobs', JSON.stringify(jobs));\n//       // return newJobs;\n//   })\n//     // prev bảo lưu, job là cv mới\n//     // sau khi setjob thì lại trả về mảng rỗng cho input\n//     setJob('')\n//     // input1.current.focus();\n//   }\n//   // const handlEditJob = (job) => {\n//   //   input2.current.focus(job);\n//   // }\n//   const handleDeleteJob = (value) => {\n//     let newJobs = [...jobs];\n//     newJobs = newJobs.filter(job => {\n//       return job !== value\n//     });\n//     setJobs(newJobs);\n//   };\n//   const handleOnKeyDown = (event) => {\n//     // console.log(event)\n//     // console.log(indexOfJobEdit,1)\n//     if (event.key === 'Enter') {\n//       handleSubmit();\n//     }\n//   }\n//   const handleOnFocus = (job, index) => {\n//     // handlEditJob()\n//     setIndexOfJobEdit(index)\n//     setJob(job)\n//     // console.log(indexOfJobEdit, 2)\n//   }\n//   // \n//   useEffect(() => {\n//     const jobs = localStorage.getItem('jobs') || \"[]\";\n//     try {\n//       const parsedJobs = JSON.parse(jobs);\n//       // Array.isArray ham xac dinh kieu cuar bien co phai mang hay ko\n//       // ham .length de xac dinh so luong phan tu trong mang\n//       if (!Array.isArray(parsedJobs) || parsedJobs.length === 0) {\n//         return;\n//       }\n//       setJobs(parsedJobs)\n//     } catch (error) {\n//       console.log('error', error);\n//     }\n//   }, [])\n//   return (\n//     <div className=\"App\" >\n//       {/* sd two-way binding */}\n//       <input\n//         // ref={input1} \n//         type=\"text\" \n//         name=\"Add\" \n//         placeholder=\"Add\"\n//         onKeyDown={handleOnKeyDown}\n//         value={job}\n//         // event goi setJob\n//         onChange={e => setJob(e.target.value)}\n//       />\n//       <button onClick={handleSubmit}>ADD</button>\n//       <ul>\n//         { }\n//         {/* render ra the li*/}\n//         {jobs.map((job, index) => (\n//           // render job lamf children cua li\n//           <li key={index}>\n//             <span>\n//             {/* <input\n//             ref ={input2}\n//             name=\"Edit\" \n//             placeholder=\"Edit\"\n//             type=\"text\"\n//             value={job}\n//             /> */}\n//             {job}\n//             </span>\n//             <button onClick={() => handleDeleteJob(job)}>Delete</button>\n//             <button onClick={() => handleOnFocus(job, index)} > Edit </button>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(TodoList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App; // \n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["TodoAdd","App"],"sources":["/Users/macos/Desktop/WorkSpace/ToDoList/TodoList-app/src/App.js"],"sourcesContent":["// import logo from './logo.svg';\nimport './App.css';\nimport TodoAdd from './components/TodoList';\n\n// // thêm công việc \n// function App() {\n//   const [job, setJob] = useState([]);\n//   // danh sach cong viec(neu local ko luu thi tra ve mang rong)\n//   // toan tu nulllist\n//   const [jobs, setJobs] = useState([]);\n//   const [indexOfJobEdit, setIndexOfJobEdit] = useState(null);\n//   // const input1 = useRef(null);\n//   // const input2 = useRef(null);\n//   // gui du lieu cua form di\n//   const handleSubmit = () => {\n//     // lấy ra mang setJobs \n//     //để bảo lưu những job trong tương lai khi mà thêm job mới\n//     // console.log(indexOfJobEdit)\n//     if(indexOfJobEdit !== null) {\n//       let newJobs = jobs.map((value,index) => {\n//         if(index === indexOfJobEdit) {\n//           return value = job;\n//         }\n//         return value\n//       })\n//       setIndexOfJobEdit(null)\n//       setJobs([...newJobs])\n//     }\n//     else {\n//       setJobs([...jobs, job])\n\n//     }\n//     setJobs( jobs => { \n//       // const newJobs = [...jobs,job];\n      \n//       localStorage.setItem('jobs', JSON.stringify(jobs));\n//       // return newJobs;\n//   })\n//     // prev bảo lưu, job là cv mới\n//     // sau khi setjob thì lại trả về mảng rỗng cho input\n//     setJob('')\n//     // input1.current.focus();\n//   }\n//   // const handlEditJob = (job) => {\n//   //   input2.current.focus(job);\n    \n//   // }\n//   const handleDeleteJob = (value) => {\n//     let newJobs = [...jobs];\n//     newJobs = newJobs.filter(job => {\n//       return job !== value\n//     });\n//     setJobs(newJobs);\n//   };\n\n//   const handleOnKeyDown = (event) => {\n//     // console.log(event)\n//     // console.log(indexOfJobEdit,1)\n//     if (event.key === 'Enter') {\n//       handleSubmit();\n//     }\n//   }\n//   const handleOnFocus = (job, index) => {\n//     // handlEditJob()\n//     setIndexOfJobEdit(index)\n//     setJob(job)\n//     // console.log(indexOfJobEdit, 2)\n//   }\n//   // \n//   useEffect(() => {\n//     const jobs = localStorage.getItem('jobs') || \"[]\";\n\n//     try {\n//       const parsedJobs = JSON.parse(jobs);\n//       // Array.isArray ham xac dinh kieu cuar bien co phai mang hay ko\n//       // ham .length de xac dinh so luong phan tu trong mang\n//       if (!Array.isArray(parsedJobs) || parsedJobs.length === 0) {\n//         return;\n//       }\n//       setJobs(parsedJobs)\n//     } catch (error) {\n//       console.log('error', error);\n//     }\n//   }, [])\n\n//   return (\n//     <div className=\"App\" >\n//       {/* sd two-way binding */}\n//       <input\n//         // ref={input1} \n//         type=\"text\" \n//         name=\"Add\" \n//         placeholder=\"Add\"\n//         onKeyDown={handleOnKeyDown}\n//         value={job}\n//         // event goi setJob\n//         onChange={e => setJob(e.target.value)}\n//       />\n//       <button onClick={handleSubmit}>ADD</button>\n//       <ul>\n//         { }\n//         {/* render ra the li*/}\n//         {jobs.map((job, index) => (\n//           // render job lamf children cua li\n//           <li key={index}>\n//             <span>\n//             {/* <input\n//             ref ={input2}\n//             name=\"Edit\" \n//             placeholder=\"Edit\"\n//             type=\"text\"\n           \n//             value={job}\n//             /> */}\n//             {job}\n//             </span>\n            \n//             <button onClick={() => handleDeleteJob(job)}>Delete</button>\n//             <button onClick={() => handleOnFocus(job, index)} > Edit </button>\n//           </li>\n\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\nfunction App() {\n  return (\n    <div className='App'>\n      <TodoList />\n    </div>\n  );\n}\n\n\nexport default App;\n\n// \n\n\n"],"mappings":";AAAA;AACA,OAAO,WAAP;AACA,OAAOA,OAAP,MAAoB,uBAApe;EACb,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,uBACE,QAAC,QAAD;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAKD;;KANQA,G;AAST,eAAeA,GAAf,C,CAEA"},"metadata":{},"sourceType":"module"}